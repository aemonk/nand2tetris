// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:

    Mux8Way16(a=in, b=in, c=in, d=in, e=in, f=in, g=in, h=in, sel=address[0..2], out=outmux);
    DMux8Way(in=load, sel=address[0..2], a=rl0, b=rl1, c=rl2, d=rl3, e=rl4, f=rl5, g=rl6, h=rl7);

    RAM8(in=outmux, load=rl0, address=address[3..5], out=r0);
    RAM8(in=outmux, load=rl1, address=address[3..5], out=r1);
    RAM8(in=outmux, load=rl2, address=address[3..5], out=r2);
    RAM8(in=outmux, load=rl3, address=address[3..5], out=r3);
    RAM8(in=outmux, load=rl4, address=address[3..5], out=r4);
    RAM8(in=outmux, load=rl5, address=address[3..5], out=r5);
    RAM8(in=outmux, load=rl6, address=address[3..5], out=r6);
    RAM8(in=outmux, load=rl7, address=address[3..5], out=r7);

    Mux8Way16(a=r0, b=r1, c=r2, d=r3, e=r4, f=r5, g=r6, h=r7, sel=address[0..2], out=out);
}
